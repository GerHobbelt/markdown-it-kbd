{"version":3,"file":"markdownItKbd.mjs","sources":["../src/index.ts"],"sourcesContent":["// [[kbd]]\n//\n\n// @ts-ignore markdown-it has no types and it’s not worth the effort adding a *.d.ts file\nimport MarkdownIt from 'markdown-it';\n// @ts-ignore markdown-it has no types and it’s not worth the effort adding a *.d.ts file\nimport StateInline from 'markdown-it/lib/rules_inline/state_inline';\n\nlet options = {\n  MARKER_OPEN: '[[',\n  MARKER_CLOSE: ']]',\n  ESCAPE_CHARACTER: '\\\\',\n  TAG: 'kbd',\n\n\t// intern use; derived at time of initialization:\n  MARKER_OPEN_1ST_CHR: 0\n};\n\n/*\n * Add delimiters for double occurrences of MARKER_SYMBOL.\n */\nfunction tokenize(state: StateInline, silent: boolean) {\n  if (silent) {\n    return false;\n  }\n\n  let start = state.pos;\n  const max = state.posMax;\n  const momChar = state.src.charCodeAt(start);\n\n\t// TODO: check for escaped open & close markers (vanilla v2.2.0 only checks for escapes in the END marker, BTW...\n\n\t// We are looking for two times the open symbol.\n  if (momChar !== options.MARKER_OPEN_1ST_CHR) {\n    return false;\n  }\n  let src = state.src.slice(start);\n  if (!src.startsWith(options.MARKER_OPEN)) {\n    return false;\n  }\n  const startLen = options.MARKER_OPEN.length;\n  start += startLen;\n  src = src.slice(startLen);\n\n\t// find the end sequence\n  let end = src.indexOf(options.MARKER_CLOSE);\n  if (end < 0) {\n\t\t// no end marker found,\n\t\t// input ended before closing sequence\n    return false;\n  }\n  const lf = src.indexOf('\\n');\n  if (lf >= 0 && lf < end) {\n\t\t// found end of line before the end sequence. Thus, ignore our start sequence!\n    return false;\n  }\n  const second = src.indexOf(options.MARKER_OPEN);\n  if (second >= 0 && second < end) {\n\t\t// found another opening sequence before the end. Thus, ignore ours!\n    return false;\n  }\n\n\t// make end position into absolute index\n  end += start;\n\n\t// start tag\n  state.push('kbd_open', options.TAG, 1);\n\t// parse inner\n  state.pos = start;\n  state.posMax = end;\n  state.md.inline.tokenize(state);\n  state.pos = end + options.MARKER_CLOSE.length;\n  state.posMax = max;\n\t// end tag\n  state.push('kbd_close', options.TAG, -1);\n\n  return true;\n}\n\nexport default function kbdplugin(markdownit: MarkdownIt, opts): void {\n  options = Object.assign(options, opts);\n  options.MARKER_OPEN_1ST_CHR = options.MARKER_OPEN.charCodeAt(0);\n\n  markdownit.inline.ruler.before('link', 'kbd', tokenize);\n}\n"],"names":["options","MARKER_OPEN","MARKER_CLOSE","ESCAPE_CHARACTER","TAG","MARKER_OPEN_1ST_CHR","tokenize","state","silent","start","pos","max","posMax","momChar","src","charCodeAt","slice","startsWith","startLen","length","end","indexOf","lf","second","push","md","inline","kbdplugin","markdownit","opts","Object","assign","ruler","before"],"mappings":"AAAA;AACA;AAOA,IAAIA,OAAO,GAAG;AACZC,EAAAA,WAAW,EAAE,IADD;AAEZC,EAAAA,YAAY,EAAE,IAFF;AAGZC,EAAAA,gBAAgB,EAAE,IAHN;AAIZC,EAAAA,GAAG,EAAE,KAJO;AAMb;AACCC,EAAAA,mBAAmB,EAAE;AAPT,CAAd;AAUA;;;;AAGA,SAASC,QAAT,CAAkBC,KAAlB,EAAsCC,MAAtC;AACE,MAAIA,MAAJ,EAAY;AACV,WAAO,KAAP;AACD;;AAED,MAAIC,KAAK,GAAGF,KAAK,CAACG,GAAlB;AACA,QAAMC,GAAG,GAAGJ,KAAK,CAACK,MAAlB;AACA,QAAMC,OAAO,GAAGN,KAAK,CAACO,GAAN,CAAUC,UAAV,CAAqBN,KAArB,CAAhB;AAID;;AACC,MAAII,OAAO,KAAKb,OAAO,CAACK,mBAAxB,EAA6C;AAC3C,WAAO,KAAP;AACD;;AACD,MAAIS,GAAG,GAAGP,KAAK,CAACO,GAAN,CAAUE,KAAV,CAAgBP,KAAhB,CAAV;;AACA,MAAI,CAACK,GAAG,CAACG,UAAJ,CAAejB,OAAO,CAACC,WAAvB,CAAL,EAA0C;AACxC,WAAO,KAAP;AACD;;AACD,QAAMiB,QAAQ,GAAGlB,OAAO,CAACC,WAAR,CAAoBkB,MAArC;AACAV,EAAAA,KAAK,IAAIS,QAAT;AACAJ,EAAAA,GAAG,GAAGA,GAAG,CAACE,KAAJ,CAAUE,QAAV,CAAN;;AAGA,MAAIE,GAAG,GAAGN,GAAG,CAACO,OAAJ,CAAYrB,OAAO,CAACE,YAApB,CAAV;;AACA,MAAIkB,GAAG,GAAG,CAAV,EAAa;AACb;AACA;AACE,WAAO,KAAP;AACD;;AACD,QAAME,EAAE,GAAGR,GAAG,CAACO,OAAJ,CAAY,IAAZ,CAAX;;AACA,MAAIC,EAAE,IAAI,CAAN,IAAWA,EAAE,GAAGF,GAApB,EAAyB;AACzB;AACE,WAAO,KAAP;AACD;;AACD,QAAMG,MAAM,GAAGT,GAAG,CAACO,OAAJ,CAAYrB,OAAO,CAACC,WAApB,CAAf;;AACA,MAAIsB,MAAM,IAAI,CAAV,IAAeA,MAAM,GAAGH,GAA5B,EAAiC;AACjC;AACE,WAAO,KAAP;AACD;;;AAGDA,EAAAA,GAAG,IAAIX,KAAP;;AAGAF,EAAAA,KAAK,CAACiB,IAAN,CAAW,UAAX,EAAuBxB,OAAO,CAACI,GAA/B,EAAoC,CAApC;;AAEAG,EAAAA,KAAK,CAACG,GAAN,GAAYD,KAAZ;AACAF,EAAAA,KAAK,CAACK,MAAN,GAAeQ,GAAf;AACAb,EAAAA,KAAK,CAACkB,EAAN,CAASC,MAAT,CAAgBpB,QAAhB,CAAyBC,KAAzB;AACAA,EAAAA,KAAK,CAACG,GAAN,GAAYU,GAAG,GAAGpB,OAAO,CAACE,YAAR,CAAqBiB,MAAvC;AACAZ,EAAAA,KAAK,CAACK,MAAN,GAAeD,GAAf;;AAEAJ,EAAAA,KAAK,CAACiB,IAAN,CAAW,WAAX,EAAwBxB,OAAO,CAACI,GAAhC,EAAqC,CAAC,CAAtC;AAEA,SAAO,IAAP;AACD;;SAEuBuB,UAAUC,YAAwBC;AACxD7B,EAAAA,OAAO,GAAG8B,MAAM,CAACC,MAAP,CAAc/B,OAAd,EAAuB6B,IAAvB,CAAV;AACA7B,EAAAA,OAAO,CAACK,mBAAR,GAA8BL,OAAO,CAACC,WAAR,CAAoBc,UAApB,CAA+B,CAA/B,CAA9B;AAEAa,EAAAA,UAAU,CAACF,MAAX,CAAkBM,KAAlB,CAAwBC,MAAxB,CAA+B,MAA/B,EAAuC,KAAvC,EAA8C3B,QAA9C;AACD;;;;"}