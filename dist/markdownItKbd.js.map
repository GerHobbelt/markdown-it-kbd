{"version":3,"file":"markdownItKbd.modern.js","sources":["../src/index.ts"],"sourcesContent":["// [[kbd]]\n//\n\n// @ts-ignore markdown-it has no types and itâ€™s not worth the effort adding a *.d.ts file\nimport type { StateInline, MarkdownIt } from '@types/markdown-it';\n\nlet options = {\n  MARKER_OPEN: '[[',\n  MARKER_CLOSE: ']]',\n  ESCAPE_CHARACTER: '\\\\',\n  TAG: 'kbd',\n\n  // intern use; derived at time of initialization:\n  MARKER_OPEN_1ST_CHR: 0,\n  MARKER_OPEN_1: '',\n  MARKER_CLOSE_1: ''\n};\n\nfunction findNextNonEscapedMarker(src, start, marker) {\n  let end;\n  let searchOffset = start;\n  for (;;) {\n    end = src.indexOf(marker, searchOffset);\n    if (end < 0) {\n      console.error(`--> NOT FOUND: marker:'${marker}' start:${start} src.sliced:'${src.slice(start)}'`);\n      return -1;\n    }\n\n    // count number of escape characters before marker:\n    // if ODD, then marker is escaped:\n    let escapeCount = 0;\n    for (let i = end - 1; i >= 0 && src.charAt(i) === options.ESCAPE_CHARACTER; i--) {\n      escapeCount++;\n    }\n    if (escapeCount % 2 === 0) {\n      // got a proper end marker now: exit loop\n      break;\n    }\n    // skip first character of escaped end marker and try again:\n    searchOffset = end + 1;\n  }\n  console.error(`--> !!! FOUND: marker:'${marker}' end:${end} start:${start} src.sliced:'${src.slice(start)}'`);\n  return end;\n}\n\nfunction findMatchingClose(src, start, level) {\n  console.error(`findMatchingClose: src.sliced:'${src.slice(start)} start:${start} level:${level}`);\n\n  let searchOffset = start;\n\n  let end = findNextNonEscapedMarker(src, searchOffset, options.MARKER_CLOSE);\n  if (end < 0) {\n    // no end marker found,\n    // input ended before closing sequence\n    console.error('--> false E');\n    return -1;\n  }\n\n  // first skip all inner KBD chunks:\n  let innerStart = start;\n\n  while (innerStart >= 0) {\n    innerStart = findNextNonEscapedMarker(src, innerStart, options.MARKER_OPEN);\n    // when there's a START *before* our END, then that MUST be an *inner* START:\n    // we should find *it's* matching END. That doesn't necessarily have to be\n    // the one we found already, as this stuff may be nested several levels!\n    if (innerStart >= 0 && innerStart < end) {\n      searchOffset = innerStart + options.MARKER_OPEN.length;\n\n      // found one. There may be more. So we move our `end` forward now to ensure the next inner KBD chunk is found as well.\n      end = findMatchingClose(src, searchOffset, level + 1);\n      if (end < 0) {\n        console.error('--> false F');\n        return -1;\n      }\n      searchOffset = end + options.MARKER_CLOSE.length;\n      innerStart = searchOffset;\n\n      end = findNextNonEscapedMarker(src, searchOffset, options.MARKER_CLOSE);\n      if (end < 0) {\n        // no end marker found,\n        // input ended before closing sequence\n        console.error('--> false G');\n        return -1;\n      }\n    } else {\n      // we only found a START that's beyond our END, so it doesn't matter. Stop looking for inner KBD chunks.\n      innerStart = -1;\n    }\n  }\n\n  // the last END marker found is our own:\n  console.error(`--> found matching close: end:${end} start:${start} src.sliced:'${src.slice(start)}' level:${level}`);\n  return end;\n}\n\n/*\n * Add delimiters for double occurrences of MARKER_SYMBOL.\n */\nfunction tokenize(state: StateInline, silent: boolean) {\n  if (silent) {\n    return false;\n  }\n\n  let start = state.pos;\n  const max = state.posMax;\n  console.error(`tokenize?: '${state.src}' --> '${state.src.slice(start)}'`);\n  const momChar = state.src.charCodeAt(start);\n\n  // We are looking for two times the open symbol.\n  if (momChar !== options.MARKER_OPEN_1ST_CHR) {\n    console.error(`--> false A ${options.MARKER_OPEN_1ST_CHR} -- ${momChar}`);\n    return false;\n  }\n  let src = state.src.slice(start);\n  if (!src.startsWith(options.MARKER_OPEN)) {\n    console.error('--> false B');\n    return false;\n  }\n  const startLen = options.MARKER_OPEN.length;\n  start += startLen;\n  src = src.slice(startLen);\n  console.error(`src = '${src}'`);\n\n  // find the end sequence\n  let end = findMatchingClose(src, 0, 1);\n  if (end < 0) {\n    // no end marker found,\n    // input ended before closing sequence\n    console.error('--> false C');\n    return false;\n  }\n\n  const lf = src.indexOf('\\n');\n  if (lf >= 0 && lf < end) {\n    // found end of line before the end sequence. Thus, ignore our start sequence!\n    console.error(`--> false D ${lf}`);\n    return false;\n  }\n\n  // make end position into absolute index\n  end += start;\n\n  // start tag\n  state.push('kbd_open', options.TAG, 1);\n  // parse inner\n  state.pos = start;\n  state.posMax = end;\n  state.md.inline.tokenize(state);\n  //console.error('inline.tokenize:', state.md);\n  state.pos = end + options.MARKER_CLOSE.length;\n  state.posMax = max;\n  // end tag\n  state.push('kbd_close', options.TAG, -1);\n\n  console.error(`--> TRUE  --> '${state.src.slice(state.pos)}'`);\n  return true;\n}\n\nexport default function kbdplugin(markdownit: MarkdownIt, opts): void {\n  options = Object.assign(options, opts);\n  options.MARKER_OPEN_1ST_CHR = options.MARKER_OPEN.charCodeAt(0);\n  options.MARKER_OPEN_1 = options.MARKER_OPEN[0];\n  options.MARKER_CLOSE_1 = options.MARKER_CLOSE[0];\n\n  markdownit.inline.ruler.before('link', 'kbd', tokenize);\n}\n"],"names":["options","MARKER_OPEN","MARKER_CLOSE","ESCAPE_CHARACTER","TAG","MARKER_OPEN_1ST_CHR","MARKER_OPEN_1","MARKER_CLOSE_1","findNextNonEscapedMarker","src","start","marker","end","searchOffset","indexOf","console","error","slice","escapeCount","i","charAt","findMatchingClose","level","innerStart","length","tokenize","state","silent","pos","max","posMax","momChar","charCodeAt","startsWith","startLen","lf","push","md","inline","kbdplugin","markdownit","opts","Object","assign","ruler","before"],"mappings":"AAAA;AACA;AAKA,IAAIA,OAAO,GAAG;AACZC,EAAAA,WAAW,EAAE,IADD;AAEZC,EAAAA,YAAY,EAAE,IAFF;AAGZC,EAAAA,gBAAgB,EAAE,IAHN;AAIZC,EAAAA,GAAG,EAAE,KAJO;AAMZ;AACAC,EAAAA,mBAAmB,EAAE,CAPT;AAQZC,EAAAA,aAAa,EAAE,EARH;AASZC,EAAAA,cAAc,EAAE;AATJ,CAAd;;AAYA,SAASC,wBAAT,CAAkCC,GAAlC,EAAuCC,KAAvC,EAA8CC,MAA9C;AACE,MAAIC,GAAJ;AACA,MAAIC,YAAY,GAAGH,KAAnB;;AACA,WAAS;AACPE,IAAAA,GAAG,GAAGH,GAAG,CAACK,OAAJ,CAAYH,MAAZ,EAAoBE,YAApB,CAAN;;AACA,QAAID,GAAG,GAAG,CAAV,EAAa;AACXG,MAAAA,OAAO,CAACC,KAAR,2BAAwCL,iBAAiBD,qBAAqBD,GAAG,CAACQ,KAAJ,CAAUP,KAAV,IAA9E;AACA,aAAO,CAAC,CAAR;AACD,KALM;AAQP;;;AACA,QAAIQ,WAAW,GAAG,CAAlB;;AACA,SAAK,IAAIC,CAAC,GAAGP,GAAG,GAAG,CAAnB,EAAsBO,CAAC,IAAI,CAAL,IAAUV,GAAG,CAACW,MAAJ,CAAWD,CAAX,MAAkBnB,OAAO,CAACG,gBAA1D,EAA4EgB,CAAC,EAA7E,EAAiF;AAC/ED,MAAAA,WAAW;AACZ;;AACD,QAAIA,WAAW,GAAG,CAAd,KAAoB,CAAxB,EAA2B;AACzB;AACA;AACD,KAhBM;;;AAkBPL,IAAAA,YAAY,GAAGD,GAAG,GAAG,CAArB;AACD;;AACDG,EAAAA,OAAO,CAACC,KAAR,2BAAwCL,eAAeC,aAAaF,qBAAqBD,GAAG,CAACQ,KAAJ,CAAUP,KAAV,IAAzF;AACA,SAAOE,GAAP;AACD;;AAED,SAASS,iBAAT,CAA2BZ,GAA3B,EAAgCC,KAAhC,EAAuCY,KAAvC;AACEP,EAAAA,OAAO,CAACC,KAAR,mCAAgDP,GAAG,CAACQ,KAAJ,CAAUP,KAAV,WAA0BA,eAAeY,OAAzF;AAEA,MAAIT,YAAY,GAAGH,KAAnB;AAEA,MAAIE,GAAG,GAAGJ,wBAAwB,CAACC,GAAD,EAAMI,YAAN,EAAoBb,OAAO,CAACE,YAA5B,CAAlC;;AACA,MAAIU,GAAG,GAAG,CAAV,EAAa;AACX;AACA;AACAG,IAAAA,OAAO,CAACC,KAAR,CAAc,aAAd;AACA,WAAO,CAAC,CAAR;AACD;;;AAGD,MAAIO,UAAU,GAAGb,KAAjB;;AAEA,SAAOa,UAAU,IAAI,CAArB,EAAwB;AACtBA,IAAAA,UAAU,GAAGf,wBAAwB,CAACC,GAAD,EAAMc,UAAN,EAAkBvB,OAAO,CAACC,WAA1B,CAArC,CADsB;AAGtB;AACA;;AACA,QAAIsB,UAAU,IAAI,CAAd,IAAmBA,UAAU,GAAGX,GAApC,EAAyC;AACvCC,MAAAA,YAAY,GAAGU,UAAU,GAAGvB,OAAO,CAACC,WAAR,CAAoBuB,MAAhD,CADuC;;AAIvCZ,MAAAA,GAAG,GAAGS,iBAAiB,CAACZ,GAAD,EAAMI,YAAN,EAAoBS,KAAK,GAAG,CAA5B,CAAvB;;AACA,UAAIV,GAAG,GAAG,CAAV,EAAa;AACXG,QAAAA,OAAO,CAACC,KAAR,CAAc,aAAd;AACA,eAAO,CAAC,CAAR;AACD;;AACDH,MAAAA,YAAY,GAAGD,GAAG,GAAGZ,OAAO,CAACE,YAAR,CAAqBsB,MAA1C;AACAD,MAAAA,UAAU,GAAGV,YAAb;AAEAD,MAAAA,GAAG,GAAGJ,wBAAwB,CAACC,GAAD,EAAMI,YAAN,EAAoBb,OAAO,CAACE,YAA5B,CAA9B;;AACA,UAAIU,GAAG,GAAG,CAAV,EAAa;AACX;AACA;AACAG,QAAAA,OAAO,CAACC,KAAR,CAAc,aAAd;AACA,eAAO,CAAC,CAAR;AACD;AACF,KAnBD,MAmBO;AACL;AACAO,MAAAA,UAAU,GAAG,CAAC,CAAd;AACD;AACF;;;AAGDR,EAAAA,OAAO,CAACC,KAAR,kCAA+CJ,aAAaF,qBAAqBD,GAAG,CAACQ,KAAJ,CAAUP,KAAV,YAA2BY,OAA5G;AACA,SAAOV,GAAP;AACD;AAED;;;;;AAGA,SAASa,QAAT,CAAkBC,KAAlB,EAAsCC,MAAtC;AACE,MAAIA,MAAJ,EAAY;AACV,WAAO,KAAP;AACD;;AAED,MAAIjB,KAAK,GAAGgB,KAAK,CAACE,GAAlB;AACA,QAAMC,GAAG,GAAGH,KAAK,CAACI,MAAlB;AACAf,EAAAA,OAAO,CAACC,KAAR,gBAA6BU,KAAK,CAACjB,aAAaiB,KAAK,CAACjB,GAAN,CAAUQ,KAAV,CAAgBP,KAAhB,IAAhD;AACA,QAAMqB,OAAO,GAAGL,KAAK,CAACjB,GAAN,CAAUuB,UAAV,CAAqBtB,KAArB,CAAhB;;AAGA,MAAIqB,OAAO,KAAK/B,OAAO,CAACK,mBAAxB,EAA6C;AAC3CU,IAAAA,OAAO,CAACC,KAAR,gBAA6BhB,OAAO,CAACK,0BAA0B0B,SAA/D;AACA,WAAO,KAAP;AACD;;AACD,MAAItB,GAAG,GAAGiB,KAAK,CAACjB,GAAN,CAAUQ,KAAV,CAAgBP,KAAhB,CAAV;;AACA,MAAI,CAACD,GAAG,CAACwB,UAAJ,CAAejC,OAAO,CAACC,WAAvB,CAAL,EAA0C;AACxCc,IAAAA,OAAO,CAACC,KAAR,CAAc,aAAd;AACA,WAAO,KAAP;AACD;;AACD,QAAMkB,QAAQ,GAAGlC,OAAO,CAACC,WAAR,CAAoBuB,MAArC;AACAd,EAAAA,KAAK,IAAIwB,QAAT;AACAzB,EAAAA,GAAG,GAAGA,GAAG,CAACQ,KAAJ,CAAUiB,QAAV,CAAN;AACAnB,EAAAA,OAAO,CAACC,KAAR,WAAwBP,MAAxB;;AAGA,MAAIG,GAAG,GAAGS,iBAAiB,CAACZ,GAAD,EAAM,CAAN,EAAS,CAAT,CAA3B;;AACA,MAAIG,GAAG,GAAG,CAAV,EAAa;AACX;AACA;AACAG,IAAAA,OAAO,CAACC,KAAR,CAAc,aAAd;AACA,WAAO,KAAP;AACD;;AAED,QAAMmB,EAAE,GAAG1B,GAAG,CAACK,OAAJ,CAAY,IAAZ,CAAX;;AACA,MAAIqB,EAAE,IAAI,CAAN,IAAWA,EAAE,GAAGvB,GAApB,EAAyB;AACvB;AACAG,IAAAA,OAAO,CAACC,KAAR,gBAA6BmB,IAA7B;AACA,WAAO,KAAP;AACD;;;AAGDvB,EAAAA,GAAG,IAAIF,KAAP;;AAGAgB,EAAAA,KAAK,CAACU,IAAN,CAAW,UAAX,EAAuBpC,OAAO,CAACI,GAA/B,EAAoC,CAApC;;AAEAsB,EAAAA,KAAK,CAACE,GAAN,GAAYlB,KAAZ;AACAgB,EAAAA,KAAK,CAACI,MAAN,GAAelB,GAAf;AACAc,EAAAA,KAAK,CAACW,EAAN,CAASC,MAAT,CAAgBb,QAAhB,CAAyBC,KAAzB;;AAEAA,EAAAA,KAAK,CAACE,GAAN,GAAYhB,GAAG,GAAGZ,OAAO,CAACE,YAAR,CAAqBsB,MAAvC;AACAE,EAAAA,KAAK,CAACI,MAAN,GAAeD,GAAf;;AAEAH,EAAAA,KAAK,CAACU,IAAN,CAAW,WAAX,EAAwBpC,OAAO,CAACI,GAAhC,EAAqC,CAAC,CAAtC;AAEAW,EAAAA,OAAO,CAACC,KAAR,mBAAgCU,KAAK,CAACjB,GAAN,CAAUQ,KAAV,CAAgBS,KAAK,CAACE,GAAtB,IAAhC;AACA,SAAO,IAAP;AACD;;SAEuBW,UAAUC,YAAwBC;AACxDzC,EAAAA,OAAO,GAAG0C,MAAM,CAACC,MAAP,CAAc3C,OAAd,EAAuByC,IAAvB,CAAV;AACAzC,EAAAA,OAAO,CAACK,mBAAR,GAA8BL,OAAO,CAACC,WAAR,CAAoB+B,UAApB,CAA+B,CAA/B,CAA9B;AACAhC,EAAAA,OAAO,CAACM,aAAR,GAAwBN,OAAO,CAACC,WAAR,CAAoB,CAApB,CAAxB;AACAD,EAAAA,OAAO,CAACO,cAAR,GAAyBP,OAAO,CAACE,YAAR,CAAqB,CAArB,CAAzB;AAEAsC,EAAAA,UAAU,CAACF,MAAX,CAAkBM,KAAlB,CAAwBC,MAAxB,CAA+B,MAA/B,EAAuC,KAAvC,EAA8CpB,QAA9C;AACD;;;;"}