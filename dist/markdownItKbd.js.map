{"version":3,"file":"markdownItKbd.modern.js","sources":["../src/index.ts"],"sourcesContent":["// [[kbd]]\n//\n\n// @ts-ignore markdown-it has no types and itâ€™s not worth the effort adding a *.d.ts file\nimport type { StateInline, MarkdownIt } from '@types/markdown-it';\n\nconst defaultOptions = {\n  MARKER_OPEN: '[[',\n  MARKER_CLOSE: ']]',\n  ESCAPE_CHARACTER: '\\\\',\n  TAG: 'kbd',\n\n  // intern use; derived at time of initialization:\n  MARKER_OPEN_1ST_CHR: 0,\n  MARKER_OPEN_1: '',\n  MARKER_CLOSE_1: ''\n};\n\nexport default function kbdplugin(markdownit: MarkdownIt, opts): void {\n  const options = Object.assign({}, defaultOptions, opts);\n  options.MARKER_OPEN_1ST_CHR = options.MARKER_OPEN.charCodeAt(0);\n  options.MARKER_OPEN_1 = options.MARKER_OPEN[0];\n  options.MARKER_CLOSE_1 = options.MARKER_CLOSE[0];\n\n\n  function findNextNonEscapedMarker(src, start, marker) {\n    let end;\n    let searchOffset = start;\n    for (;;) {\n      end = src.indexOf(marker, searchOffset);\n      if (end < 0) {\n        console.error(`--> NOT FOUND: marker:'${marker}' start:${start} src.sliced:'${src.slice(start)}'`);\n        return -1;\n      }\n\n    // count number of escape characters before marker:\n    // if ODD, then marker is escaped:\n      let escapeCount = 0;\n      for (let i = end - 1; i >= 0 && src.charAt(i) === options.ESCAPE_CHARACTER; i--) {\n        escapeCount++;\n      }\n      if (escapeCount % 2 === 0) {\n      // got a proper end marker now: exit loop\n        break;\n      }\n    // skip first character of escaped end marker and try again:\n      searchOffset = end + 1;\n    }\n    console.error(`--> !!! FOUND: marker:'${marker}' end:${end} start:${start} src.sliced:'${src.slice(start)}'`);\n    return end;\n  }\n\n  function findMatchingClose(src, start, level) {\n    console.error(`findMatchingClose: src.sliced:'${src.slice(start)} start:${start} level:${level}`);\n\n    let searchOffset = start;\n\n    let end = findNextNonEscapedMarker(src, searchOffset, options.MARKER_CLOSE);\n    if (end < 0) {\n    // no end marker found,\n    // input ended before closing sequence\n      console.error('--> false E');\n      return -1;\n    }\n\n  // first skip all inner KBD chunks:\n    let innerStart = start;\n\n    while (innerStart >= 0) {\n      innerStart = findNextNonEscapedMarker(src, innerStart, options.MARKER_OPEN);\n    // when there's a START *before* our END, then that MUST be an *inner* START:\n    // we should find *it's* matching END. That doesn't necessarily have to be\n    // the one we found already, as this stuff may be nested several levels!\n      if (innerStart >= 0 && innerStart < end) {\n        searchOffset = innerStart + options.MARKER_OPEN.length;\n\n      // found one. There may be more. So we move our `end` forward now to ensure the next inner KBD chunk is found as well.\n        end = findMatchingClose(src, searchOffset, level + 1);\n        if (end < 0) {\n          console.error('--> false F');\n          return -1;\n        }\n        searchOffset = end + options.MARKER_CLOSE.length;\n        innerStart = searchOffset;\n\n        end = findNextNonEscapedMarker(src, searchOffset, options.MARKER_CLOSE);\n        if (end < 0) {\n        // no end marker found,\n        // input ended before closing sequence\n          console.error('--> false G');\n          return -1;\n        }\n      } else {\n      // we only found a START that's beyond our END, so it doesn't matter. Stop looking for inner KBD chunks.\n        innerStart = -1;\n      }\n    }\n\n  // the last END marker found is our own:\n    console.error(`--> found matching close: end:${end} start:${start} src.sliced:'${src.slice(start)}' level:${level}`);\n    return end;\n  }\n\n/*\n * Add delimiters for double occurrences of MARKER_SYMBOL.\n */\n  function tokenize(state: StateInline, silent: boolean) {\n    if (silent) {\n      return false;\n    }\n\n    let start = state.pos;\n    const max = state.posMax;\n    console.error(`tokenize?: '${state.src}' --> '${state.src.slice(start)}'`);\n    const momChar = state.src.charCodeAt(start);\n\n  // We are looking for two times the open symbol.\n    if (momChar !== options.MARKER_OPEN_1ST_CHR) {\n      console.error(`--> false A ${options.MARKER_OPEN_1ST_CHR} -- ${momChar}`);\n      return false;\n    }\n    let src = state.src.slice(start);\n    if (!src.startsWith(options.MARKER_OPEN)) {\n      console.error(`--> false B src:'${src}' rv:${src.startsWith(options.MARKER_OPEN)} marker:'${options.MARKER_OPEN}'`);\n      return false;\n    }\n    const startLen = options.MARKER_OPEN.length;\n    start += startLen;\n    src = src.slice(startLen);\n    console.error(`src = '${src}'`);\n\n  // find the end sequence\n    let end = findMatchingClose(src, 0, 1);\n    if (end < 0) {\n    // no end marker found,\n    // input ended before closing sequence\n      console.error('--> false C');\n      return false;\n    }\n\n    const lf = src.indexOf('\\n');\n    if (lf >= 0 && lf < end) {\n    // found end of line before the end sequence. Thus, ignore our start sequence!\n      console.error(`--> false D ${lf}`);\n      return false;\n    }\n\n  // make end position into absolute index\n    end += start;\n\n  // start tag\n    state.push('kbd_open', options.TAG, 1);\n  // parse inner\n    state.pos = start;\n    state.posMax = end;\n    state.md.inline.tokenize(state);\n  //console.error('inline.tokenize:', state.md);\n    state.pos = end + options.MARKER_CLOSE.length;\n    state.posMax = max;\n  // end tag\n    state.push('kbd_close', options.TAG, -1);\n\n    console.error(`--> TRUE  --> '${state.src.slice(state.pos)}'`);\n    return true;\n  }\n\n\n  markdownit.inline.ruler.before('link', 'kbd', tokenize);\n}\n"],"names":["defaultOptions","MARKER_OPEN","MARKER_CLOSE","ESCAPE_CHARACTER","TAG","MARKER_OPEN_1ST_CHR","MARKER_OPEN_1","MARKER_CLOSE_1","kbdplugin","markdownit","opts","options","Object","assign","charCodeAt","findNextNonEscapedMarker","src","start","marker","end","searchOffset","indexOf","console","error","slice","escapeCount","i","charAt","findMatchingClose","level","innerStart","length","tokenize","state","silent","pos","max","posMax","momChar","startsWith","startLen","lf","push","md","inline","ruler","before"],"mappings":"AAAA;AACA;AAKA,MAAMA,cAAc,GAAG;AACrBC,EAAAA,WAAW,EAAE,IADQ;AAErBC,EAAAA,YAAY,EAAE,IAFO;AAGrBC,EAAAA,gBAAgB,EAAE,IAHG;AAIrBC,EAAAA,GAAG,EAAE,KAJgB;AAMrB;AACAC,EAAAA,mBAAmB,EAAE,CAPA;AAQrBC,EAAAA,aAAa,EAAE,EARM;AASrBC,EAAAA,cAAc,EAAE;AATK,CAAvB;SAYwBC,UAAUC,YAAwBC;AACxD,QAAMC,OAAO,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBb,cAAlB,EAAkCU,IAAlC,CAAhB;AACAC,EAAAA,OAAO,CAACN,mBAAR,GAA8BM,OAAO,CAACV,WAAR,CAAoBa,UAApB,CAA+B,CAA/B,CAA9B;AACAH,EAAAA,OAAO,CAACL,aAAR,GAAwBK,OAAO,CAACV,WAAR,CAAoB,CAApB,CAAxB;AACAU,EAAAA,OAAO,CAACJ,cAAR,GAAyBI,OAAO,CAACT,YAAR,CAAqB,CAArB,CAAzB;;AAGA,WAASa,wBAAT,CAAkCC,GAAlC,EAAuCC,KAAvC,EAA8CC,MAA9C;AACE,QAAIC,GAAJ;AACA,QAAIC,YAAY,GAAGH,KAAnB;;AACA,aAAS;AACPE,MAAAA,GAAG,GAAGH,GAAG,CAACK,OAAJ,CAAYH,MAAZ,EAAoBE,YAApB,CAAN;;AACA,UAAID,GAAG,GAAG,CAAV,EAAa;AACXG,QAAAA,OAAO,CAACC,KAAR,2BAAwCL,iBAAiBD,qBAAqBD,GAAG,CAACQ,KAAJ,CAAUP,KAAV,IAA9E;AACA,eAAO,CAAC,CAAR;AACD,OALM;AAQT;;;AACE,UAAIQ,WAAW,GAAG,CAAlB;;AACA,WAAK,IAAIC,CAAC,GAAGP,GAAG,GAAG,CAAnB,EAAsBO,CAAC,IAAI,CAAL,IAAUV,GAAG,CAACW,MAAJ,CAAWD,CAAX,MAAkBf,OAAO,CAACR,gBAA1D,EAA4EuB,CAAC,EAA7E,EAAiF;AAC/ED,QAAAA,WAAW;AACZ;;AACD,UAAIA,WAAW,GAAG,CAAd,KAAoB,CAAxB,EAA2B;AAC3B;AACE;AACD,OAhBM;;;AAkBPL,MAAAA,YAAY,GAAGD,GAAG,GAAG,CAArB;AACD;;AACDG,IAAAA,OAAO,CAACC,KAAR,2BAAwCL,eAAeC,aAAaF,qBAAqBD,GAAG,CAACQ,KAAJ,CAAUP,KAAV,IAAzF;AACA,WAAOE,GAAP;AACD;;AAED,WAASS,iBAAT,CAA2BZ,GAA3B,EAAgCC,KAAhC,EAAuCY,KAAvC;AACEP,IAAAA,OAAO,CAACC,KAAR,mCAAgDP,GAAG,CAACQ,KAAJ,CAAUP,KAAV,WAA0BA,eAAeY,OAAzF;AAEA,QAAIT,YAAY,GAAGH,KAAnB;AAEA,QAAIE,GAAG,GAAGJ,wBAAwB,CAACC,GAAD,EAAMI,YAAN,EAAoBT,OAAO,CAACT,YAA5B,CAAlC;;AACA,QAAIiB,GAAG,GAAG,CAAV,EAAa;AACb;AACA;AACEG,MAAAA,OAAO,CAACC,KAAR,CAAc,aAAd;AACA,aAAO,CAAC,CAAR;AACD;;;AAGD,QAAIO,UAAU,GAAGb,KAAjB;;AAEA,WAAOa,UAAU,IAAI,CAArB,EAAwB;AACtBA,MAAAA,UAAU,GAAGf,wBAAwB,CAACC,GAAD,EAAMc,UAAN,EAAkBnB,OAAO,CAACV,WAA1B,CAArC,CADsB;AAGxB;AACA;;AACE,UAAI6B,UAAU,IAAI,CAAd,IAAmBA,UAAU,GAAGX,GAApC,EAAyC;AACvCC,QAAAA,YAAY,GAAGU,UAAU,GAAGnB,OAAO,CAACV,WAAR,CAAoB8B,MAAhD,CADuC;;AAIvCZ,QAAAA,GAAG,GAAGS,iBAAiB,CAACZ,GAAD,EAAMI,YAAN,EAAoBS,KAAK,GAAG,CAA5B,CAAvB;;AACA,YAAIV,GAAG,GAAG,CAAV,EAAa;AACXG,UAAAA,OAAO,CAACC,KAAR,CAAc,aAAd;AACA,iBAAO,CAAC,CAAR;AACD;;AACDH,QAAAA,YAAY,GAAGD,GAAG,GAAGR,OAAO,CAACT,YAAR,CAAqB6B,MAA1C;AACAD,QAAAA,UAAU,GAAGV,YAAb;AAEAD,QAAAA,GAAG,GAAGJ,wBAAwB,CAACC,GAAD,EAAMI,YAAN,EAAoBT,OAAO,CAACT,YAA5B,CAA9B;;AACA,YAAIiB,GAAG,GAAG,CAAV,EAAa;AACb;AACA;AACEG,UAAAA,OAAO,CAACC,KAAR,CAAc,aAAd;AACA,iBAAO,CAAC,CAAR;AACD;AACF,OAnBD,MAmBO;AACP;AACEO,QAAAA,UAAU,GAAG,CAAC,CAAd;AACD;AACF;;;AAGDR,IAAAA,OAAO,CAACC,KAAR,kCAA+CJ,aAAaF,qBAAqBD,GAAG,CAACQ,KAAJ,CAAUP,KAAV,YAA2BY,OAA5G;AACA,WAAOV,GAAP;AACD;AAEH;;;;;AAGE,WAASa,QAAT,CAAkBC,KAAlB,EAAsCC,MAAtC;AACE,QAAIA,MAAJ,EAAY;AACV,aAAO,KAAP;AACD;;AAED,QAAIjB,KAAK,GAAGgB,KAAK,CAACE,GAAlB;AACA,UAAMC,GAAG,GAAGH,KAAK,CAACI,MAAlB;AACAf,IAAAA,OAAO,CAACC,KAAR,gBAA6BU,KAAK,CAACjB,aAAaiB,KAAK,CAACjB,GAAN,CAAUQ,KAAV,CAAgBP,KAAhB,IAAhD;AACA,UAAMqB,OAAO,GAAGL,KAAK,CAACjB,GAAN,CAAUF,UAAV,CAAqBG,KAArB,CAAhB;;AAGA,QAAIqB,OAAO,KAAK3B,OAAO,CAACN,mBAAxB,EAA6C;AAC3CiB,MAAAA,OAAO,CAACC,KAAR,gBAA6BZ,OAAO,CAACN,0BAA0BiC,SAA/D;AACA,aAAO,KAAP;AACD;;AACD,QAAItB,GAAG,GAAGiB,KAAK,CAACjB,GAAN,CAAUQ,KAAV,CAAgBP,KAAhB,CAAV;;AACA,QAAI,CAACD,GAAG,CAACuB,UAAJ,CAAe5B,OAAO,CAACV,WAAvB,CAAL,EAA0C;AACxCqB,MAAAA,OAAO,CAACC,KAAR,qBAAkCP,WAAWA,GAAG,CAACuB,UAAJ,CAAe5B,OAAO,CAACV,WAAvB,aAA+CU,OAAO,CAACV,cAApG;AACA,aAAO,KAAP;AACD;;AACD,UAAMuC,QAAQ,GAAG7B,OAAO,CAACV,WAAR,CAAoB8B,MAArC;AACAd,IAAAA,KAAK,IAAIuB,QAAT;AACAxB,IAAAA,GAAG,GAAGA,GAAG,CAACQ,KAAJ,CAAUgB,QAAV,CAAN;AACAlB,IAAAA,OAAO,CAACC,KAAR,WAAwBP,MAAxB;;AAGA,QAAIG,GAAG,GAAGS,iBAAiB,CAACZ,GAAD,EAAM,CAAN,EAAS,CAAT,CAA3B;;AACA,QAAIG,GAAG,GAAG,CAAV,EAAa;AACb;AACA;AACEG,MAAAA,OAAO,CAACC,KAAR,CAAc,aAAd;AACA,aAAO,KAAP;AACD;;AAED,UAAMkB,EAAE,GAAGzB,GAAG,CAACK,OAAJ,CAAY,IAAZ,CAAX;;AACA,QAAIoB,EAAE,IAAI,CAAN,IAAWA,EAAE,GAAGtB,GAApB,EAAyB;AACzB;AACEG,MAAAA,OAAO,CAACC,KAAR,gBAA6BkB,IAA7B;AACA,aAAO,KAAP;AACD;;;AAGDtB,IAAAA,GAAG,IAAIF,KAAP;;AAGAgB,IAAAA,KAAK,CAACS,IAAN,CAAW,UAAX,EAAuB/B,OAAO,CAACP,GAA/B,EAAoC,CAApC;;AAEA6B,IAAAA,KAAK,CAACE,GAAN,GAAYlB,KAAZ;AACAgB,IAAAA,KAAK,CAACI,MAAN,GAAelB,GAAf;AACAc,IAAAA,KAAK,CAACU,EAAN,CAASC,MAAT,CAAgBZ,QAAhB,CAAyBC,KAAzB;;AAEAA,IAAAA,KAAK,CAACE,GAAN,GAAYhB,GAAG,GAAGR,OAAO,CAACT,YAAR,CAAqB6B,MAAvC;AACAE,IAAAA,KAAK,CAACI,MAAN,GAAeD,GAAf;;AAEAH,IAAAA,KAAK,CAACS,IAAN,CAAW,WAAX,EAAwB/B,OAAO,CAACP,GAAhC,EAAqC,CAAC,CAAtC;AAEAkB,IAAAA,OAAO,CAACC,KAAR,mBAAgCU,KAAK,CAACjB,GAAN,CAAUQ,KAAV,CAAgBS,KAAK,CAACE,GAAtB,IAAhC;AACA,WAAO,IAAP;AACD;;AAGD1B,EAAAA,UAAU,CAACmC,MAAX,CAAkBC,KAAlB,CAAwBC,MAAxB,CAA+B,MAA/B,EAAuC,KAAvC,EAA8Cd,QAA9C;AACD;;;;"}